import logging
import os
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'TOKEN' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

bot = Bot(token=TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot, update_queue=None, use_context=True)
logging.basicConfig(level=logging.INFO)

donations = []
MIN_AMOUNT = 0.15  # –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
CONTENT_LINK = "https://drive.google.com/drive/folders/18OEeQ4QhgHEDWac1RJz0PY8EoJVZbGH_?usp=drive_link"
DONATE_LINK = "https://www.donationalerts.com/r/archive_unlock?v=2"

@app.route('/')
def home():
    return '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    if data and 'username' in data and 'amount' in data:
        username = data['username']
        amount = float(data['amount'])
        donations.append({'username': username.lower(), 'amount': amount})
        logging.info(f"üí∏ –ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç: {username} ‚Äî {amount}$")
    return "OK", 200

def start(update, context):
    keyboard = [[InlineKeyboardButton("üí∏ –û–ü–õ–ê–¢–ò–¢–¨", url=DONATE_LINK)],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üéâ\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ '–û–ü–õ–ê–¢–ò–¢–¨' –∏ —Å–¥–µ–ª–∞–π –¥–æ–Ω–∞—Ç –æ—Ç 0.15$ (USD).\n"
        "2Ô∏è‚É£ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —Å–≤–æ–π @username –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –¥–æ–Ω–∞—Ç—É!\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–Ω–∞—Ç–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª.\n",
        reply_markup=reply_markup
    )

def check_payment(update, context):
    query = update.callback_query
    user = query.from_user
    username = user.username.lower() if user.username else ""

    for donation in donations:
        if username in donation['username'] and donation['amount'] >= MIN_AMOUNT:
            query.message.reply_text(f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç:\n{CONTENT_LINK}")
            return

    query.message.reply_text("‚ùå –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª @username –∏ —Å—É–º–º–∞ –Ω–µ –º–µ–Ω—å—à–µ $0.15.")

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CallbackQueryHandler(check_payment))

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)

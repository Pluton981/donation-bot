import logging
import os
import uuid
import requests
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler
from datetime import datetime
from pytz import utc
from apscheduler.schedulers.background import BackgroundScheduler

TELEGRAM_TOKEN = os.environ.get("TOKEN")
LAVA_JWT = os.environ.get("LAVA_JWT")
YOUMONEY_URL = "https://yoomoney.ru/to/4100116270792125"
LAVA_API_URL = "https://api.lava.kz/invoice/create"
DRIVE_LINK = "https://drive.google.com/drive/folders/1Bv8vEMKYJq2N-MojB--UVdj5ihrSrWm9?usp=sharing"

bot = Bot(token=TELEGRAM_TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot, update_queue=None, use_context=True)
logging.basicConfig(level=logging.INFO)

invoices = {}  # user_id: lava_invoice_id

def start(update, context):
    user = update.message.from_user

    first_text = (
        "üí∏ –í—ã–≤–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é ‚Äî $1 250\n"
        "–ë–µ–∑ –ª–∏—Ü–∞.\n"
        "–ë–µ–∑ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏.\n"
        "–ü—Ä–∏ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö ~30 –º–∏–Ω –≤ –¥–µ–Ω—å."
    )
    update.message.reply_text(first_text)

    with open("kaspi.jpg", "rb") as photo:
        bot.send_photo(chat_id=update.message.chat_id, photo=photo)

    after_image = (
        "–û–¥–∏–Ω –æ–±—Ä–∞–∑.\n"
        "–ß—ë—Ç–∫–∞—è –ø–æ–¥–∞—á–∞.\n"
        "–ò —Å–∏—Å—Ç–µ–º–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π —à–∞–≥ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω.\n\n"
        "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –º–æ–¥–µ–ª—å,\n"
        "–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –≤–∏–∑—É–∞–ª,\n"
        "–æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ –≥–æ—Ç–æ–≤—ã–º —à–∞–±–ª–æ–Ω–∞–º\n"
        "‚Äî –∏ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–µ—à—å –≤–Ω–∏–º–∞–Ω–∏–µ.\n\n"
        "üìå –≠—Ç–æ –∏ –µ—Å—Ç—å AI Girl 2.0\n\n"
        "ü§ñ AI Girl 2.0 ‚Äî —Å–≤—è–∑–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–æ—Å–∏—Ç –¥–µ–Ω—å–≥–∏\n"
        "–≠—Ç–æ –ø–æ—à–∞–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:\n"
        "üë© –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n"
        "üì∏ AI-–æ–±—Ä–∞–∑—ã –∏ –ø–æ–¥–∞—á–∞\n"
        "üí∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–æ–≤\n\n"
        "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –∑–∞–ø—É—Å–∫–∞\n"
        "‚Ä¢ –í—Å–µ –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –®–∞–±–ª–æ–Ω—ã –æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏—ë–º–∞ –æ–ø–ª–∞—Ç—ã\n\n"
        "–í—Å—ë —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ. –ü—Ä–æ—Å—Ç–æ –¥–µ–π—Å—Ç–≤—É–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
        "üåü –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:\n"
        "–ó–∞–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî $0.15\n\n"
        "1‚É£ –ù–∞–∂–º–∏ [–û–ü–õ–ê–¢–ò–¢–¨] –∏ —Å–¥–µ–ª–∞–π –ø–µ—Ä–µ–≤–æ–¥\n"
        "2‚É£ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —Å–≤–æ–π @username –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ\n"
        "3‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ ‚úÖ [—è –æ–ø–ª–∞—Ç–∏–ª]\n"
        "4‚É£ –ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª"
    )

    keyboard = [
        [InlineKeyboardButton("üíµ –û–ü–õ–ê–¢–ò–¢–¨", callback_data="choose_country")],
        [InlineKeyboardButton("‚úÖ —è –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")],
    ]
    update.message.reply_text(after_image, reply_markup=InlineKeyboardMarkup(keyboard))

def choose_country(update, context):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="pay_russia")],
        [InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="pay_kazakhstan")],
    ]
    query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

def create_lava_invoice(user_id, username):
    order_id = str(uuid.uuid4())
    invoices[user_id] = order_id
    payload = {
        "amount": 70,
        "order_id": order_id,
        "comment": username or "anon",
        "hook_url": "https://your-domain.com/lava_webhook",
        "success_url": "https://t.me/your_bot_username"
    }
    headers = {"Authorization": f"Bearer {LAVA_JWT}"}
    response = requests.post(LAVA_API_URL, json=payload, headers=headers)
    data = response.json()
    return data.get("url")

def handle_country(update, context):
    query = update.callback_query
    user = query.from_user

    if query.data == "pay_russia":
        query.edit_message_text("–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ÆMoney", url=YOUMONEY_URL)]
        ]))

    elif query.data == "pay_kazakhstan":
        invoice_url = create_lava_invoice(user.id, user.username)
        if invoice_url:
            query.edit_message_text("–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Lava", url=invoice_url)]
            ]))
        else:
            query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def check_payment(update, context):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id in invoices:
        query.message.reply_text(f"üéâ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {DRIVE_LINK}")
    else:
        query.message.reply_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@app.route("/lava_webhook", methods=["POST"])
def lava_webhook():
    data = request.json
    logging.info(f"Webhook: {data}")

    if data.get("status") == "success":
        order_id = data.get("order_id")
        for uid, oid in invoices.items():
            if oid == order_id:
                bot.send_message(chat_id=uid, text=f"üéâ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {DRIVE_LINK}")
                break
    return "OK", 200

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK", 200

# Handlers
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CallbackQueryHandler(choose_country, pattern="^choose_country$"))
dispatcher.add_handler(CallbackQueryHandler(handle_country, pattern="^pay_"))
dispatcher.add_handler(CallbackQueryHandler(check_payment, pattern="^check_payment$"))

# Cron job to clear old invoices
scheduler = BackgroundScheduler(timezone=utc)
scheduler.add_job(lambda: invoices.clear(), "interval", hours=6)
scheduler.start()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)

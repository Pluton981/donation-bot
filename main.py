import logging
import os
import time
import threading
import requests
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler

# --- –ö–æ–Ω—Ñ–∏–≥–∏ ---
TOKEN = os.environ.get("TOKEN")
DA_TOKEN = os.environ.get("DA_TOKEN")

MIN_AMOUNT = 20
CONTENT_LINK = "https://drive.google.com/drive/folders/18OEeQ4QhgHEDWac1RJz0PY8EoJVZbGH_?usp=drive_link"
DA_API_URL = "https://www.donationalerts.com/api/v1/alerts"

if not TOKEN or not DA_TOKEN:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM TOKEN –∏–ª–∏ DA TOKEN")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot, update_queue=None, use_context=True)
logging.basicConfig(level=logging.INFO)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
donations_checked = set()
waiting_users = set()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ---
WELCOME_TEXT = (
    "üí∏ –í—ã–≤–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é ‚Äî $1 250\n"
    "–ë–µ–∑ –ª–∏—Ü–∞.\n"
    "–ë–µ–∑ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏.\n"
    "–ü—Ä–∏ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö ~30 –º–∏–Ω –≤ –¥–µ–Ω—å.\n\n"
    "<a href=\"https://donation-bot-ffz2.onrender.com/static/kaspi.jpg\">\u200b</a>\n"
    "–û–¥–∏–Ω –æ–±—Ä–∞–∑.\n"
    "–ß—ë—Ç–∫–∞—è –ø–æ–¥–∞—á–∞.\n"
    "–ò —Å–∏—Å—Ç–µ–º–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π —à–∞–≥ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω.\n\n"
    "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –º–æ–¥–µ–ª—å,\n"
    "–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –≤–∏–∑—É–∞–ª,\n"
    "–æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ –≥–æ—Ç–æ–≤—ã–º —à–∞–±–ª–æ–Ω–∞–º\n"
    "‚Äî –∏ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–µ—à—å –≤–Ω–∏–º–∞–Ω–∏–µ.\n\n"
    "üìå –≠—Ç–æ –∏ –µ—Å—Ç—å AI Girl 2.0\n\n"
    "ü§ñ AI Girl 2.0 ‚Äî —Å–≤—è–∑–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–æ—Å–∏—Ç –¥–µ–Ω—å–≥–∏\n"
    "–≠—Ç–æ –ø–æ—à–∞–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:\n"
    "üë© –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n"
    "üì∏ AI-–æ–±—Ä–∞–∑—ã –∏ –ø–æ–¥–∞—á–∞\n"
    "üí∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–Ω–∞—Ç–æ–≤\n\n"
    "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
    "‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –∑–∞–ø—É—Å–∫–∞\n"
    "‚Ä¢ –í—Å–µ –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
    "‚Ä¢ –®–∞–±–ª–æ–Ω—ã –æ–±—â–µ–Ω–∏—è\n"
    "‚Ä¢ –°–ø–æ—Å–æ–± –ø—Ä–∏—ë–º–∞ –æ–ø–ª–∞—Ç—ã\n\n"
    "–í—Å—ë —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ. –ü—Ä–æ—Å—Ç–æ –¥–µ–π—Å—Ç–≤—É–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
    "üíµ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:\n"
    "–ó–∞–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî $20\n\n"
    "1Ô∏è‚É£ –ù–∞–∂–º–∏ <a href=\"https://www.donationalerts.com/r/archive_unlock?v=2\">–û–ü–õ–ê–¢–ò–¢–¨</a> –∏ —Å–¥–µ–ª–∞–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ $20\n"
    "2Ô∏è‚É£ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —Å–≤–æ–π @username –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ\n"
    "3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
    "4Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª üíΩ"
)

# --- Flask route ---
@app.route("/")
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

# --- Telegram —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
def start(update, context):
    user = update.message.from_user
    username = user.username
    if username:
        waiting_users.add(username.lower())
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(WELCOME_TEXT, reply_markup=reply_markup, parse_mode='HTML')
    with open("kaspi.jpg", "rb") as photo:
        update.message.reply_photo(photo)

def check_payment(update, context):
    query = update.callback_query
    user = query.from_user
    username = user.username.lower() if user.username else ""
    if username in donations_checked:
        query.message.reply_text(f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç:\n{CONTENT_LINK}")
    else:
        query.message.reply_text("‚ùå –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏ @username –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –¥–æ–Ω–∞—Ç—É –∏ —Å—É–º–º—É –æ—Ç $20.")

# --- –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤ ---
def poll_donations():
    while True:
        headers = {"Authorization": f"Bearer {DA_TOKEN}"}
        try:
            res = requests.get(DA_API_URL, headers=headers)
            data = res.json()
            for item in data.get("data", []):
                username = item.get("username", "").lower()
                amount = float(item.get("amount", 0))
                if username in waiting_users and amount >= MIN_AMOUNT:
                    donations_checked.add(username)
                    bot.send_message(
                        chat_id=item.get("message", {}).get("chat_id", None),
                        text=f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç:\n{CONTENT_LINK}"
                    )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DA API: {e}")
        time.sleep(30)  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CallbackQueryHandler(check_payment))

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK", 200

# --- –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ---
th = threading.Thread(target=poll_donations, daemon=True)
th.start()

if __name__ == '__main__':
    from waitress import serve
    serve(app, host="0.0.0.0", port=10000)
